// ------------------------------------------------------------
// 
// File Name: hdlsrc\RaisedCosine\FIR_Decimation
// Created: 2022-06-15 12:02:44
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// ------------------------------------------------------------
// 
// 
// ------------------------------------------------------------
// 
// Module: FIR_Decimation
// Source Path: /FIR_Decimation
// 
// ------------------------------------------------------------
// 
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// Multipliers           : 81



`timescale 1 ns / 1 ns

module FIR_Decimation
               (
                clk,
                enb_1_1000000_1,
                reset,
                FIR_Decimation_in,
                FIR_Decimation_out
                );

  input   clk; 
  input   enb_1_1000000_1; 
  input   reset; 
  input   signed [15:0] FIR_Decimation_in; //sfix16_En12
  output  signed [15:0] FIR_Decimation_out; //sfix16_En12

////////////////////////////////////////////////////////////////
//Module Architecture: FIR_Decimation
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeffphase1_1 = 16'b1111111110101011; //sfix16_En16
  parameter signed [15:0] coeffphase1_2 = 16'b1111111111011110; //sfix16_En16
  parameter signed [15:0] coeffphase1_3 = 16'b0000000011101001; //sfix16_En16
  parameter signed [15:0] coeffphase1_4 = 16'b1111111000001110; //sfix16_En16
  parameter signed [15:0] coeffphase1_5 = 16'b0000001100100010; //sfix16_En16
  parameter signed [15:0] coeffphase1_6 = 16'b1111101110101110; //sfix16_En16
  parameter signed [15:0] coeffphase1_7 = 16'b0000010101010101; //sfix16_En16
  parameter signed [15:0] coeffphase1_8 = 16'b1111100111111100; //sfix16_En16
  parameter signed [15:0] coeffphase1_9 = 16'b0111100011000000; //sfix16_En16
  parameter signed [15:0] coeffphase1_10 = 16'b1111100111111100; //sfix16_En16
  parameter signed [15:0] coeffphase1_11 = 16'b0000010101010101; //sfix16_En16
  parameter signed [15:0] coeffphase1_12 = 16'b1111101110101110; //sfix16_En16
  parameter signed [15:0] coeffphase1_13 = 16'b0000001100100010; //sfix16_En16
  parameter signed [15:0] coeffphase1_14 = 16'b1111111000001110; //sfix16_En16
  parameter signed [15:0] coeffphase1_15 = 16'b0000000011101001; //sfix16_En16
  parameter signed [15:0] coeffphase1_16 = 16'b1111111111011110; //sfix16_En16
  parameter signed [15:0] coeffphase1_17 = 16'b1111111110101011; //sfix16_En16
  parameter signed [15:0] coeffphase2_1 = 16'b0000000000111110; //sfix16_En16
  parameter signed [15:0] coeffphase2_2 = 16'b1111111101001010; //sfix16_En16
  parameter signed [15:0] coeffphase2_3 = 16'b0000000100100010; //sfix16_En16
  parameter signed [15:0] coeffphase2_4 = 16'b1111111010111000; //sfix16_En16
  parameter signed [15:0] coeffphase2_5 = 16'b0000000011001111; //sfix16_En16
  parameter signed [15:0] coeffphase2_6 = 16'b0000000011011111; //sfix16_En16
  parameter signed [15:0] coeffphase2_7 = 16'b1111101010111010; //sfix16_En16
  parameter signed [15:0] coeffphase2_8 = 16'b0001010011010011; //sfix16_En16
  parameter signed [15:0] coeffphase2_9 = 16'b0110111111101000; //sfix16_En16
  parameter signed [15:0] coeffphase2_10 = 16'b1110101011011110; //sfix16_En16
  parameter signed [15:0] coeffphase2_11 = 16'b0000101101010011; //sfix16_En16
  parameter signed [15:0] coeffphase2_12 = 16'b1111100101100011; //sfix16_En16
  parameter signed [15:0] coeffphase2_13 = 16'b0000001110010011; //sfix16_En16
  parameter signed [15:0] coeffphase2_14 = 16'b1111111001111101; //sfix16_En16
  parameter signed [15:0] coeffphase2_15 = 16'b0000000000110011; //sfix16_En16
  parameter signed [15:0] coeffphase2_16 = 16'b0000000001111110; //sfix16_En16
  parameter signed [15:0] coeffphase2_17 = 16'b0000000000000000; //sfix16_En16
  parameter signed [15:0] coeffphase3_1 = 16'b0000000010111000; //sfix16_En16
  parameter signed [15:0] coeffphase3_2 = 16'b1111111100011100; //sfix16_En16
  parameter signed [15:0] coeffphase3_3 = 16'b0000000010100010; //sfix16_En16
  parameter signed [15:0] coeffphase3_4 = 16'b0000000001100011; //sfix16_En16
  parameter signed [15:0] coeffphase3_5 = 16'b1111110101011001; //sfix16_En16
  parameter signed [15:0] coeffphase3_6 = 16'b0000011100011010; //sfix16_En16
  parameter signed [15:0] coeffphase3_7 = 16'b1110111101000010; //sfix16_En16
  parameter signed [15:0] coeffphase3_8 = 16'b0011011010011111; //sfix16_En16
  parameter signed [15:0] coeffphase3_9 = 16'b0101011110111110; //sfix16_En16
  parameter signed [15:0] coeffphase3_10 = 16'b1110100001000011; //sfix16_En16
  parameter signed [15:0] coeffphase3_11 = 16'b0000101101111111; //sfix16_En16
  parameter signed [15:0] coeffphase3_12 = 16'b1111101001001100; //sfix16_En16
  parameter signed [15:0] coeffphase3_13 = 16'b0000001001011011; //sfix16_En16
  parameter signed [15:0] coeffphase3_14 = 16'b1111111110010011; //sfix16_En16
  parameter signed [15:0] coeffphase3_15 = 16'b1111111101110111; //sfix16_En16
  parameter signed [15:0] coeffphase3_16 = 16'b0000000011010101; //sfix16_En16
  parameter signed [15:0] coeffphase3_17 = 16'b0000000000000000; //sfix16_En16
  parameter signed [15:0] coeffphase4_1 = 16'b0000000011010101; //sfix16_En16
  parameter signed [15:0] coeffphase4_2 = 16'b1111111101110111; //sfix16_En16
  parameter signed [15:0] coeffphase4_3 = 16'b1111111110010011; //sfix16_En16
  parameter signed [15:0] coeffphase4_4 = 16'b0000001001011011; //sfix16_En16
  parameter signed [15:0] coeffphase4_5 = 16'b1111101001001100; //sfix16_En16
  parameter signed [15:0] coeffphase4_6 = 16'b0000101101111111; //sfix16_En16
  parameter signed [15:0] coeffphase4_7 = 16'b1110100001000011; //sfix16_En16
  parameter signed [15:0] coeffphase4_8 = 16'b0101011110111110; //sfix16_En16
  parameter signed [15:0] coeffphase4_9 = 16'b0011011010011111; //sfix16_En16
  parameter signed [15:0] coeffphase4_10 = 16'b1110111101000010; //sfix16_En16
  parameter signed [15:0] coeffphase4_11 = 16'b0000011100011010; //sfix16_En16
  parameter signed [15:0] coeffphase4_12 = 16'b1111110101011001; //sfix16_En16
  parameter signed [15:0] coeffphase4_13 = 16'b0000000001100011; //sfix16_En16
  parameter signed [15:0] coeffphase4_14 = 16'b0000000010100010; //sfix16_En16
  parameter signed [15:0] coeffphase4_15 = 16'b1111111100011100; //sfix16_En16
  parameter signed [15:0] coeffphase4_16 = 16'b0000000010111000; //sfix16_En16
  parameter signed [15:0] coeffphase4_17 = 16'b0000000000000000; //sfix16_En16
  parameter signed [15:0] coeffphase5_1 = 16'b0000000001111110; //sfix16_En16
  parameter signed [15:0] coeffphase5_2 = 16'b0000000000110011; //sfix16_En16
  parameter signed [15:0] coeffphase5_3 = 16'b1111111001111101; //sfix16_En16
  parameter signed [15:0] coeffphase5_4 = 16'b0000001110010011; //sfix16_En16
  parameter signed [15:0] coeffphase5_5 = 16'b1111100101100011; //sfix16_En16
  parameter signed [15:0] coeffphase5_6 = 16'b0000101101010011; //sfix16_En16
  parameter signed [15:0] coeffphase5_7 = 16'b1110101011011110; //sfix16_En16
  parameter signed [15:0] coeffphase5_8 = 16'b0110111111101000; //sfix16_En16
  parameter signed [15:0] coeffphase5_9 = 16'b0001010011010011; //sfix16_En16
  parameter signed [15:0] coeffphase5_10 = 16'b1111101010111010; //sfix16_En16
  parameter signed [15:0] coeffphase5_11 = 16'b0000000011011111; //sfix16_En16
  parameter signed [15:0] coeffphase5_12 = 16'b0000000011001111; //sfix16_En16
  parameter signed [15:0] coeffphase5_13 = 16'b1111111010111000; //sfix16_En16
  parameter signed [15:0] coeffphase5_14 = 16'b0000000100100010; //sfix16_En16
  parameter signed [15:0] coeffphase5_15 = 16'b1111111101001010; //sfix16_En16
  parameter signed [15:0] coeffphase5_16 = 16'b0000000000111110; //sfix16_En16
  parameter signed [15:0] coeffphase5_17 = 16'b0000000000000000; //sfix16_En16

  // Signals
  reg  [4:0] ring_count; // ufix5
  wire phase_0; // boolean
  wire phase_1; // boolean
  wire phase_2; // boolean
  wire phase_3; // boolean
  wire phase_4; // boolean
  wire signed [15:0] input_typeconvert; // sfix16_En12
  reg  signed [15:0] input_pipeline_phase0 [0:15] ; // sfix16_En12
  reg  signed [15:0] input_pipeline_phase1 [0:15] ; // sfix16_En12
  reg  signed [15:0] input_pipeline_phase2 [0:15] ; // sfix16_En12
  reg  signed [15:0] input_pipeline_phase3 [0:15] ; // sfix16_En12
  reg  signed [15:0] input_pipeline_phase4 [0:15] ; // sfix16_En12
  wire signed [15:0] product_phase0_1; // sfix16_En12
  wire signed [31:0] mul_temp; // sfix32_En28
  wire signed [15:0] product_phase0_2; // sfix16_En12
  wire signed [31:0] mul_temp_1; // sfix32_En28
  wire signed [15:0] product_phase0_3; // sfix16_En12
  wire signed [31:0] mul_temp_2; // sfix32_En28
  wire signed [15:0] product_phase0_4; // sfix16_En12
  wire signed [31:0] mul_temp_3; // sfix32_En28
  wire signed [15:0] product_phase0_5; // sfix16_En12
  wire signed [31:0] mul_temp_4; // sfix32_En28
  wire signed [15:0] product_phase0_6; // sfix16_En12
  wire signed [31:0] mul_temp_5; // sfix32_En28
  wire signed [15:0] product_phase0_7; // sfix16_En12
  wire signed [31:0] mul_temp_6; // sfix32_En28
  wire signed [15:0] product_phase0_8; // sfix16_En12
  wire signed [31:0] mul_temp_7; // sfix32_En28
  wire signed [15:0] product_phase0_9; // sfix16_En12
  wire signed [31:0] mul_temp_8; // sfix32_En28
  wire signed [15:0] product_phase0_10; // sfix16_En12
  wire signed [31:0] mul_temp_9; // sfix32_En28
  wire signed [15:0] product_phase0_11; // sfix16_En12
  wire signed [31:0] mul_temp_10; // sfix32_En28
  wire signed [15:0] product_phase0_12; // sfix16_En12
  wire signed [31:0] mul_temp_11; // sfix32_En28
  wire signed [15:0] product_phase0_13; // sfix16_En12
  wire signed [31:0] mul_temp_12; // sfix32_En28
  wire signed [15:0] product_phase0_14; // sfix16_En12
  wire signed [31:0] mul_temp_13; // sfix32_En28
  wire signed [15:0] product_phase0_15; // sfix16_En12
  wire signed [31:0] mul_temp_14; // sfix32_En28
  wire signed [15:0] product_phase0_16; // sfix16_En12
  wire signed [31:0] mul_temp_15; // sfix32_En28
  wire signed [15:0] product_phase0_17; // sfix16_En12
  wire signed [31:0] mul_temp_16; // sfix32_En28
  wire signed [15:0] product_phase1_1; // sfix16_En12
  wire signed [31:0] mul_temp_17; // sfix32_En28
  wire signed [15:0] product_phase1_2; // sfix16_En12
  wire signed [31:0] mul_temp_18; // sfix32_En28
  wire signed [15:0] product_phase1_3; // sfix16_En12
  wire signed [31:0] mul_temp_19; // sfix32_En28
  wire signed [15:0] product_phase1_4; // sfix16_En12
  wire signed [31:0] mul_temp_20; // sfix32_En28
  wire signed [15:0] product_phase1_5; // sfix16_En12
  wire signed [31:0] mul_temp_21; // sfix32_En28
  wire signed [15:0] product_phase1_6; // sfix16_En12
  wire signed [31:0] mul_temp_22; // sfix32_En28
  wire signed [15:0] product_phase1_7; // sfix16_En12
  wire signed [31:0] mul_temp_23; // sfix32_En28
  wire signed [15:0] product_phase1_8; // sfix16_En12
  wire signed [31:0] mul_temp_24; // sfix32_En28
  wire signed [15:0] product_phase1_9; // sfix16_En12
  wire signed [31:0] mul_temp_25; // sfix32_En28
  wire signed [15:0] product_phase1_10; // sfix16_En12
  wire signed [31:0] mul_temp_26; // sfix32_En28
  wire signed [15:0] product_phase1_11; // sfix16_En12
  wire signed [31:0] mul_temp_27; // sfix32_En28
  wire signed [15:0] product_phase1_12; // sfix16_En12
  wire signed [31:0] mul_temp_28; // sfix32_En28
  wire signed [15:0] product_phase1_13; // sfix16_En12
  wire signed [31:0] mul_temp_29; // sfix32_En28
  wire signed [15:0] product_phase1_14; // sfix16_En12
  wire signed [31:0] mul_temp_30; // sfix32_En28
  wire signed [15:0] product_phase1_15; // sfix16_En12
  wire signed [31:0] mul_temp_31; // sfix32_En28
  wire signed [15:0] product_phase1_16; // sfix16_En12
  wire signed [31:0] mul_temp_32; // sfix32_En28
  wire signed [15:0] product_phase2_1; // sfix16_En12
  wire signed [31:0] mul_temp_33; // sfix32_En28
  wire signed [15:0] product_phase2_2; // sfix16_En12
  wire signed [31:0] mul_temp_34; // sfix32_En28
  wire signed [15:0] product_phase2_3; // sfix16_En12
  wire signed [31:0] mul_temp_35; // sfix32_En28
  wire signed [15:0] product_phase2_4; // sfix16_En12
  wire signed [31:0] mul_temp_36; // sfix32_En28
  wire signed [15:0] product_phase2_5; // sfix16_En12
  wire signed [31:0] mul_temp_37; // sfix32_En28
  wire signed [15:0] product_phase2_6; // sfix16_En12
  wire signed [31:0] mul_temp_38; // sfix32_En28
  wire signed [15:0] product_phase2_7; // sfix16_En12
  wire signed [31:0] mul_temp_39; // sfix32_En28
  wire signed [15:0] product_phase2_8; // sfix16_En12
  wire signed [31:0] mul_temp_40; // sfix32_En28
  wire signed [15:0] product_phase2_9; // sfix16_En12
  wire signed [31:0] mul_temp_41; // sfix32_En28
  wire signed [15:0] product_phase2_10; // sfix16_En12
  wire signed [31:0] mul_temp_42; // sfix32_En28
  wire signed [15:0] product_phase2_11; // sfix16_En12
  wire signed [31:0] mul_temp_43; // sfix32_En28
  wire signed [15:0] product_phase2_12; // sfix16_En12
  wire signed [31:0] mul_temp_44; // sfix32_En28
  wire signed [15:0] product_phase2_13; // sfix16_En12
  wire signed [31:0] mul_temp_45; // sfix32_En28
  wire signed [15:0] product_phase2_14; // sfix16_En12
  wire signed [31:0] mul_temp_46; // sfix32_En28
  wire signed [15:0] product_phase2_15; // sfix16_En12
  wire signed [31:0] mul_temp_47; // sfix32_En28
  wire signed [15:0] product_phase2_16; // sfix16_En12
  wire signed [31:0] mul_temp_48; // sfix32_En28
  wire signed [15:0] product_phase3_1; // sfix16_En12
  wire signed [31:0] mul_temp_49; // sfix32_En28
  wire signed [15:0] product_phase3_2; // sfix16_En12
  wire signed [31:0] mul_temp_50; // sfix32_En28
  wire signed [15:0] product_phase3_3; // sfix16_En12
  wire signed [31:0] mul_temp_51; // sfix32_En28
  wire signed [15:0] product_phase3_4; // sfix16_En12
  wire signed [31:0] mul_temp_52; // sfix32_En28
  wire signed [15:0] product_phase3_5; // sfix16_En12
  wire signed [31:0] mul_temp_53; // sfix32_En28
  wire signed [15:0] product_phase3_6; // sfix16_En12
  wire signed [31:0] mul_temp_54; // sfix32_En28
  wire signed [15:0] product_phase3_7; // sfix16_En12
  wire signed [31:0] mul_temp_55; // sfix32_En28
  wire signed [15:0] product_phase3_8; // sfix16_En12
  wire signed [31:0] mul_temp_56; // sfix32_En28
  wire signed [15:0] product_phase3_9; // sfix16_En12
  wire signed [31:0] mul_temp_57; // sfix32_En28
  wire signed [15:0] product_phase3_10; // sfix16_En12
  wire signed [31:0] mul_temp_58; // sfix32_En28
  wire signed [15:0] product_phase3_11; // sfix16_En12
  wire signed [31:0] mul_temp_59; // sfix32_En28
  wire signed [15:0] product_phase3_12; // sfix16_En12
  wire signed [31:0] mul_temp_60; // sfix32_En28
  wire signed [15:0] product_phase3_13; // sfix16_En12
  wire signed [31:0] mul_temp_61; // sfix32_En28
  wire signed [15:0] product_phase3_14; // sfix16_En12
  wire signed [31:0] mul_temp_62; // sfix32_En28
  wire signed [15:0] product_phase3_15; // sfix16_En12
  wire signed [31:0] mul_temp_63; // sfix32_En28
  wire signed [15:0] product_phase3_16; // sfix16_En12
  wire signed [31:0] mul_temp_64; // sfix32_En28
  wire signed [15:0] product_phase4_1; // sfix16_En12
  wire signed [31:0] mul_temp_65; // sfix32_En28
  wire signed [15:0] product_phase4_2; // sfix16_En12
  wire signed [31:0] mul_temp_66; // sfix32_En28
  wire signed [15:0] product_phase4_3; // sfix16_En12
  wire signed [31:0] mul_temp_67; // sfix32_En28
  wire signed [15:0] product_phase4_4; // sfix16_En12
  wire signed [31:0] mul_temp_68; // sfix32_En28
  wire signed [15:0] product_phase4_5; // sfix16_En12
  wire signed [31:0] mul_temp_69; // sfix32_En28
  wire signed [15:0] product_phase4_6; // sfix16_En12
  wire signed [31:0] mul_temp_70; // sfix32_En28
  wire signed [15:0] product_phase4_7; // sfix16_En12
  wire signed [31:0] mul_temp_71; // sfix32_En28
  wire signed [15:0] product_phase4_8; // sfix16_En12
  wire signed [31:0] mul_temp_72; // sfix32_En28
  wire signed [15:0] product_phase4_9; // sfix16_En12
  wire signed [31:0] mul_temp_73; // sfix32_En28
  wire signed [15:0] product_phase4_10; // sfix16_En12
  wire signed [31:0] mul_temp_74; // sfix32_En28
  wire signed [15:0] product_phase4_11; // sfix16_En12
  wire signed [31:0] mul_temp_75; // sfix32_En28
  wire signed [15:0] product_phase4_12; // sfix16_En12
  wire signed [31:0] mul_temp_76; // sfix32_En28
  wire signed [15:0] product_phase4_13; // sfix16_En12
  wire signed [31:0] mul_temp_77; // sfix32_En28
  wire signed [15:0] product_phase4_14; // sfix16_En12
  wire signed [31:0] mul_temp_78; // sfix32_En28
  wire signed [15:0] product_phase4_15; // sfix16_En12
  wire signed [31:0] mul_temp_79; // sfix32_En28
  wire signed [15:0] product_phase4_16; // sfix16_En12
  wire signed [31:0] mul_temp_80; // sfix32_En28
  wire signed [15:0] quantized_sum; // sfix16_En12
  wire signed [15:0] sum1; // sfix16_En12
  wire signed [15:0] add_cast; // sfix16_En12
  wire signed [15:0] add_cast_1; // sfix16_En12
  wire signed [16:0] add_temp; // sfix17_En12
  wire signed [15:0] sum2; // sfix16_En12
  wire signed [15:0] add_cast_2; // sfix16_En12
  wire signed [15:0] add_cast_3; // sfix16_En12
  wire signed [16:0] add_temp_1; // sfix17_En12
  wire signed [15:0] sum3; // sfix16_En12
  wire signed [15:0] add_cast_4; // sfix16_En12
  wire signed [15:0] add_cast_5; // sfix16_En12
  wire signed [16:0] add_temp_2; // sfix17_En12
  wire signed [15:0] sum4; // sfix16_En12
  wire signed [15:0] add_cast_6; // sfix16_En12
  wire signed [15:0] add_cast_7; // sfix16_En12
  wire signed [16:0] add_temp_3; // sfix17_En12
  wire signed [15:0] sum5; // sfix16_En12
  wire signed [15:0] add_cast_8; // sfix16_En12
  wire signed [15:0] add_cast_9; // sfix16_En12
  wire signed [16:0] add_temp_4; // sfix17_En12
  wire signed [15:0] sum6; // sfix16_En12
  wire signed [15:0] add_cast_10; // sfix16_En12
  wire signed [15:0] add_cast_11; // sfix16_En12
  wire signed [16:0] add_temp_5; // sfix17_En12
  wire signed [15:0] sum7; // sfix16_En12
  wire signed [15:0] add_cast_12; // sfix16_En12
  wire signed [15:0] add_cast_13; // sfix16_En12
  wire signed [16:0] add_temp_6; // sfix17_En12
  wire signed [15:0] sum8; // sfix16_En12
  wire signed [15:0] add_cast_14; // sfix16_En12
  wire signed [15:0] add_cast_15; // sfix16_En12
  wire signed [16:0] add_temp_7; // sfix17_En12
  wire signed [15:0] sum9; // sfix16_En12
  wire signed [15:0] add_cast_16; // sfix16_En12
  wire signed [15:0] add_cast_17; // sfix16_En12
  wire signed [16:0] add_temp_8; // sfix17_En12
  wire signed [15:0] sum10; // sfix16_En12
  wire signed [15:0] add_cast_18; // sfix16_En12
  wire signed [15:0] add_cast_19; // sfix16_En12
  wire signed [16:0] add_temp_9; // sfix17_En12
  wire signed [15:0] sum11; // sfix16_En12
  wire signed [15:0] add_cast_20; // sfix16_En12
  wire signed [15:0] add_cast_21; // sfix16_En12
  wire signed [16:0] add_temp_10; // sfix17_En12
  wire signed [15:0] sum12; // sfix16_En12
  wire signed [15:0] add_cast_22; // sfix16_En12
  wire signed [15:0] add_cast_23; // sfix16_En12
  wire signed [16:0] add_temp_11; // sfix17_En12
  wire signed [15:0] sum13; // sfix16_En12
  wire signed [15:0] add_cast_24; // sfix16_En12
  wire signed [15:0] add_cast_25; // sfix16_En12
  wire signed [16:0] add_temp_12; // sfix17_En12
  wire signed [15:0] sum14; // sfix16_En12
  wire signed [15:0] add_cast_26; // sfix16_En12
  wire signed [15:0] add_cast_27; // sfix16_En12
  wire signed [16:0] add_temp_13; // sfix17_En12
  wire signed [15:0] sum15; // sfix16_En12
  wire signed [15:0] add_cast_28; // sfix16_En12
  wire signed [15:0] add_cast_29; // sfix16_En12
  wire signed [16:0] add_temp_14; // sfix17_En12
  wire signed [15:0] sum16; // sfix16_En12
  wire signed [15:0] add_cast_30; // sfix16_En12
  wire signed [15:0] add_cast_31; // sfix16_En12
  wire signed [16:0] add_temp_15; // sfix17_En12
  wire signed [15:0] sum17; // sfix16_En12
  wire signed [15:0] add_cast_32; // sfix16_En12
  wire signed [15:0] add_cast_33; // sfix16_En12
  wire signed [16:0] add_temp_16; // sfix17_En12
  wire signed [15:0] sum18; // sfix16_En12
  wire signed [15:0] add_cast_34; // sfix16_En12
  wire signed [15:0] add_cast_35; // sfix16_En12
  wire signed [16:0] add_temp_17; // sfix17_En12
  wire signed [15:0] sum19; // sfix16_En12
  wire signed [15:0] add_cast_36; // sfix16_En12
  wire signed [15:0] add_cast_37; // sfix16_En12
  wire signed [16:0] add_temp_18; // sfix17_En12
  wire signed [15:0] sum20; // sfix16_En12
  wire signed [15:0] add_cast_38; // sfix16_En12
  wire signed [15:0] add_cast_39; // sfix16_En12
  wire signed [16:0] add_temp_19; // sfix17_En12
  wire signed [15:0] sum21; // sfix16_En12
  wire signed [15:0] add_cast_40; // sfix16_En12
  wire signed [15:0] add_cast_41; // sfix16_En12
  wire signed [16:0] add_temp_20; // sfix17_En12
  wire signed [15:0] sum22; // sfix16_En12
  wire signed [15:0] add_cast_42; // sfix16_En12
  wire signed [15:0] add_cast_43; // sfix16_En12
  wire signed [16:0] add_temp_21; // sfix17_En12
  wire signed [15:0] sum23; // sfix16_En12
  wire signed [15:0] add_cast_44; // sfix16_En12
  wire signed [15:0] add_cast_45; // sfix16_En12
  wire signed [16:0] add_temp_22; // sfix17_En12
  wire signed [15:0] sum24; // sfix16_En12
  wire signed [15:0] add_cast_46; // sfix16_En12
  wire signed [15:0] add_cast_47; // sfix16_En12
  wire signed [16:0] add_temp_23; // sfix17_En12
  wire signed [15:0] sum25; // sfix16_En12
  wire signed [15:0] add_cast_48; // sfix16_En12
  wire signed [15:0] add_cast_49; // sfix16_En12
  wire signed [16:0] add_temp_24; // sfix17_En12
  wire signed [15:0] sum26; // sfix16_En12
  wire signed [15:0] add_cast_50; // sfix16_En12
  wire signed [15:0] add_cast_51; // sfix16_En12
  wire signed [16:0] add_temp_25; // sfix17_En12
  wire signed [15:0] sum27; // sfix16_En12
  wire signed [15:0] add_cast_52; // sfix16_En12
  wire signed [15:0] add_cast_53; // sfix16_En12
  wire signed [16:0] add_temp_26; // sfix17_En12
  wire signed [15:0] sum28; // sfix16_En12
  wire signed [15:0] add_cast_54; // sfix16_En12
  wire signed [15:0] add_cast_55; // sfix16_En12
  wire signed [16:0] add_temp_27; // sfix17_En12
  wire signed [15:0] sum29; // sfix16_En12
  wire signed [15:0] add_cast_56; // sfix16_En12
  wire signed [15:0] add_cast_57; // sfix16_En12
  wire signed [16:0] add_temp_28; // sfix17_En12
  wire signed [15:0] sum30; // sfix16_En12
  wire signed [15:0] add_cast_58; // sfix16_En12
  wire signed [15:0] add_cast_59; // sfix16_En12
  wire signed [16:0] add_temp_29; // sfix17_En12
  wire signed [15:0] sum31; // sfix16_En12
  wire signed [15:0] add_cast_60; // sfix16_En12
  wire signed [15:0] add_cast_61; // sfix16_En12
  wire signed [16:0] add_temp_30; // sfix17_En12
  wire signed [15:0] sum32; // sfix16_En12
  wire signed [15:0] add_cast_62; // sfix16_En12
  wire signed [15:0] add_cast_63; // sfix16_En12
  wire signed [16:0] add_temp_31; // sfix17_En12
  wire signed [15:0] sum33; // sfix16_En12
  wire signed [15:0] add_cast_64; // sfix16_En12
  wire signed [15:0] add_cast_65; // sfix16_En12
  wire signed [16:0] add_temp_32; // sfix17_En12
  wire signed [15:0] sum34; // sfix16_En12
  wire signed [15:0] add_cast_66; // sfix16_En12
  wire signed [15:0] add_cast_67; // sfix16_En12
  wire signed [16:0] add_temp_33; // sfix17_En12
  wire signed [15:0] sum35; // sfix16_En12
  wire signed [15:0] add_cast_68; // sfix16_En12
  wire signed [15:0] add_cast_69; // sfix16_En12
  wire signed [16:0] add_temp_34; // sfix17_En12
  wire signed [15:0] sum36; // sfix16_En12
  wire signed [15:0] add_cast_70; // sfix16_En12
  wire signed [15:0] add_cast_71; // sfix16_En12
  wire signed [16:0] add_temp_35; // sfix17_En12
  wire signed [15:0] sum37; // sfix16_En12
  wire signed [15:0] add_cast_72; // sfix16_En12
  wire signed [15:0] add_cast_73; // sfix16_En12
  wire signed [16:0] add_temp_36; // sfix17_En12
  wire signed [15:0] sum38; // sfix16_En12
  wire signed [15:0] add_cast_74; // sfix16_En12
  wire signed [15:0] add_cast_75; // sfix16_En12
  wire signed [16:0] add_temp_37; // sfix17_En12
  wire signed [15:0] sum39; // sfix16_En12
  wire signed [15:0] add_cast_76; // sfix16_En12
  wire signed [15:0] add_cast_77; // sfix16_En12
  wire signed [16:0] add_temp_38; // sfix17_En12
  wire signed [15:0] sum40; // sfix16_En12
  wire signed [15:0] add_cast_78; // sfix16_En12
  wire signed [15:0] add_cast_79; // sfix16_En12
  wire signed [16:0] add_temp_39; // sfix17_En12
  wire signed [15:0] sum41; // sfix16_En12
  wire signed [15:0] add_cast_80; // sfix16_En12
  wire signed [15:0] add_cast_81; // sfix16_En12
  wire signed [16:0] add_temp_40; // sfix17_En12
  wire signed [15:0] sum42; // sfix16_En12
  wire signed [15:0] add_cast_82; // sfix16_En12
  wire signed [15:0] add_cast_83; // sfix16_En12
  wire signed [16:0] add_temp_41; // sfix17_En12
  wire signed [15:0] sum43; // sfix16_En12
  wire signed [15:0] add_cast_84; // sfix16_En12
  wire signed [15:0] add_cast_85; // sfix16_En12
  wire signed [16:0] add_temp_42; // sfix17_En12
  wire signed [15:0] sum44; // sfix16_En12
  wire signed [15:0] add_cast_86; // sfix16_En12
  wire signed [15:0] add_cast_87; // sfix16_En12
  wire signed [16:0] add_temp_43; // sfix17_En12
  wire signed [15:0] sum45; // sfix16_En12
  wire signed [15:0] add_cast_88; // sfix16_En12
  wire signed [15:0] add_cast_89; // sfix16_En12
  wire signed [16:0] add_temp_44; // sfix17_En12
  wire signed [15:0] sum46; // sfix16_En12
  wire signed [15:0] add_cast_90; // sfix16_En12
  wire signed [15:0] add_cast_91; // sfix16_En12
  wire signed [16:0] add_temp_45; // sfix17_En12
  wire signed [15:0] sum47; // sfix16_En12
  wire signed [15:0] add_cast_92; // sfix16_En12
  wire signed [15:0] add_cast_93; // sfix16_En12
  wire signed [16:0] add_temp_46; // sfix17_En12
  wire signed [15:0] sum48; // sfix16_En12
  wire signed [15:0] add_cast_94; // sfix16_En12
  wire signed [15:0] add_cast_95; // sfix16_En12
  wire signed [16:0] add_temp_47; // sfix17_En12
  wire signed [15:0] sum49; // sfix16_En12
  wire signed [15:0] add_cast_96; // sfix16_En12
  wire signed [15:0] add_cast_97; // sfix16_En12
  wire signed [16:0] add_temp_48; // sfix17_En12
  wire signed [15:0] sum50; // sfix16_En12
  wire signed [15:0] add_cast_98; // sfix16_En12
  wire signed [15:0] add_cast_99; // sfix16_En12
  wire signed [16:0] add_temp_49; // sfix17_En12
  wire signed [15:0] sum51; // sfix16_En12
  wire signed [15:0] add_cast_100; // sfix16_En12
  wire signed [15:0] add_cast_101; // sfix16_En12
  wire signed [16:0] add_temp_50; // sfix17_En12
  wire signed [15:0] sum52; // sfix16_En12
  wire signed [15:0] add_cast_102; // sfix16_En12
  wire signed [15:0] add_cast_103; // sfix16_En12
  wire signed [16:0] add_temp_51; // sfix17_En12
  wire signed [15:0] sum53; // sfix16_En12
  wire signed [15:0] add_cast_104; // sfix16_En12
  wire signed [15:0] add_cast_105; // sfix16_En12
  wire signed [16:0] add_temp_52; // sfix17_En12
  wire signed [15:0] sum54; // sfix16_En12
  wire signed [15:0] add_cast_106; // sfix16_En12
  wire signed [15:0] add_cast_107; // sfix16_En12
  wire signed [16:0] add_temp_53; // sfix17_En12
  wire signed [15:0] sum55; // sfix16_En12
  wire signed [15:0] add_cast_108; // sfix16_En12
  wire signed [15:0] add_cast_109; // sfix16_En12
  wire signed [16:0] add_temp_54; // sfix17_En12
  wire signed [15:0] sum56; // sfix16_En12
  wire signed [15:0] add_cast_110; // sfix16_En12
  wire signed [15:0] add_cast_111; // sfix16_En12
  wire signed [16:0] add_temp_55; // sfix17_En12
  wire signed [15:0] sum57; // sfix16_En12
  wire signed [15:0] add_cast_112; // sfix16_En12
  wire signed [15:0] add_cast_113; // sfix16_En12
  wire signed [16:0] add_temp_56; // sfix17_En12
  wire signed [15:0] sum58; // sfix16_En12
  wire signed [15:0] add_cast_114; // sfix16_En12
  wire signed [15:0] add_cast_115; // sfix16_En12
  wire signed [16:0] add_temp_57; // sfix17_En12
  wire signed [15:0] sum59; // sfix16_En12
  wire signed [15:0] add_cast_116; // sfix16_En12
  wire signed [15:0] add_cast_117; // sfix16_En12
  wire signed [16:0] add_temp_58; // sfix17_En12
  wire signed [15:0] sum60; // sfix16_En12
  wire signed [15:0] add_cast_118; // sfix16_En12
  wire signed [15:0] add_cast_119; // sfix16_En12
  wire signed [16:0] add_temp_59; // sfix17_En12
  wire signed [15:0] sum61; // sfix16_En12
  wire signed [15:0] add_cast_120; // sfix16_En12
  wire signed [15:0] add_cast_121; // sfix16_En12
  wire signed [16:0] add_temp_60; // sfix17_En12
  wire signed [15:0] sum62; // sfix16_En12
  wire signed [15:0] add_cast_122; // sfix16_En12
  wire signed [15:0] add_cast_123; // sfix16_En12
  wire signed [16:0] add_temp_61; // sfix17_En12
  wire signed [15:0] sum63; // sfix16_En12
  wire signed [15:0] add_cast_124; // sfix16_En12
  wire signed [15:0] add_cast_125; // sfix16_En12
  wire signed [16:0] add_temp_62; // sfix17_En12
  wire signed [15:0] sum64; // sfix16_En12
  wire signed [15:0] add_cast_126; // sfix16_En12
  wire signed [15:0] add_cast_127; // sfix16_En12
  wire signed [16:0] add_temp_63; // sfix17_En12
  wire signed [15:0] sum65; // sfix16_En12
  wire signed [15:0] add_cast_128; // sfix16_En12
  wire signed [15:0] add_cast_129; // sfix16_En12
  wire signed [16:0] add_temp_64; // sfix17_En12
  wire signed [15:0] sum66; // sfix16_En12
  wire signed [15:0] add_cast_130; // sfix16_En12
  wire signed [15:0] add_cast_131; // sfix16_En12
  wire signed [16:0] add_temp_65; // sfix17_En12
  wire signed [15:0] sum67; // sfix16_En12
  wire signed [15:0] add_cast_132; // sfix16_En12
  wire signed [15:0] add_cast_133; // sfix16_En12
  wire signed [16:0] add_temp_66; // sfix17_En12
  wire signed [15:0] sum68; // sfix16_En12
  wire signed [15:0] add_cast_134; // sfix16_En12
  wire signed [15:0] add_cast_135; // sfix16_En12
  wire signed [16:0] add_temp_67; // sfix17_En12
  wire signed [15:0] sum69; // sfix16_En12
  wire signed [15:0] add_cast_136; // sfix16_En12
  wire signed [15:0] add_cast_137; // sfix16_En12
  wire signed [16:0] add_temp_68; // sfix17_En12
  wire signed [15:0] sum70; // sfix16_En12
  wire signed [15:0] add_cast_138; // sfix16_En12
  wire signed [15:0] add_cast_139; // sfix16_En12
  wire signed [16:0] add_temp_69; // sfix17_En12
  wire signed [15:0] sum71; // sfix16_En12
  wire signed [15:0] add_cast_140; // sfix16_En12
  wire signed [15:0] add_cast_141; // sfix16_En12
  wire signed [16:0] add_temp_70; // sfix17_En12
  wire signed [15:0] sum72; // sfix16_En12
  wire signed [15:0] add_cast_142; // sfix16_En12
  wire signed [15:0] add_cast_143; // sfix16_En12
  wire signed [16:0] add_temp_71; // sfix17_En12
  wire signed [15:0] sum73; // sfix16_En12
  wire signed [15:0] add_cast_144; // sfix16_En12
  wire signed [15:0] add_cast_145; // sfix16_En12
  wire signed [16:0] add_temp_72; // sfix17_En12
  wire signed [15:0] sum74; // sfix16_En12
  wire signed [15:0] add_cast_146; // sfix16_En12
  wire signed [15:0] add_cast_147; // sfix16_En12
  wire signed [16:0] add_temp_73; // sfix17_En12
  wire signed [15:0] sum75; // sfix16_En12
  wire signed [15:0] add_cast_148; // sfix16_En12
  wire signed [15:0] add_cast_149; // sfix16_En12
  wire signed [16:0] add_temp_74; // sfix17_En12
  wire signed [15:0] sum76; // sfix16_En12
  wire signed [15:0] add_cast_150; // sfix16_En12
  wire signed [15:0] add_cast_151; // sfix16_En12
  wire signed [16:0] add_temp_75; // sfix17_En12
  wire signed [15:0] sum77; // sfix16_En12
  wire signed [15:0] add_cast_152; // sfix16_En12
  wire signed [15:0] add_cast_153; // sfix16_En12
  wire signed [16:0] add_temp_76; // sfix17_En12
  wire signed [15:0] sum78; // sfix16_En12
  wire signed [15:0] add_cast_154; // sfix16_En12
  wire signed [15:0] add_cast_155; // sfix16_En12
  wire signed [16:0] add_temp_77; // sfix17_En12
  wire signed [15:0] sum79; // sfix16_En12
  wire signed [15:0] add_cast_156; // sfix16_En12
  wire signed [15:0] add_cast_157; // sfix16_En12
  wire signed [16:0] add_temp_78; // sfix17_En12
  wire signed [15:0] sum80; // sfix16_En12
  wire signed [15:0] add_cast_158; // sfix16_En12
  wire signed [15:0] add_cast_159; // sfix16_En12
  wire signed [16:0] add_temp_79; // sfix17_En12
  reg  signed [15:0] regout; // sfix16_En12
  wire signed [15:0] muxout; // sfix16_En12

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        ring_count <= 1;
      end
      else begin
                if (enb_1_1000000_1 == 1'b1) begin
        ring_count <= {ring_count[0], ring_count[4 : 1]};
              end
            end
    end // ce_output

  assign  phase_0 = ring_count[0]  && enb_1_1000000_1;

  assign  phase_1 = ring_count[1]  && enb_1_1000000_1;

  assign  phase_2 = ring_count[2]  && enb_1_1000000_1;

  assign  phase_3 = ring_count[3]  && enb_1_1000000_1;

  assign  phase_4 = ring_count[4]  && enb_1_1000000_1;

  assign input_typeconvert = FIR_Decimation_in;

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase0_process
      if (reset == 1'b1) begin
        input_pipeline_phase0[0] <= 0;
        input_pipeline_phase0[1] <= 0;
        input_pipeline_phase0[2] <= 0;
        input_pipeline_phase0[3] <= 0;
        input_pipeline_phase0[4] <= 0;
        input_pipeline_phase0[5] <= 0;
        input_pipeline_phase0[6] <= 0;
        input_pipeline_phase0[7] <= 0;
        input_pipeline_phase0[8] <= 0;
        input_pipeline_phase0[9] <= 0;
        input_pipeline_phase0[10] <= 0;
        input_pipeline_phase0[11] <= 0;
        input_pipeline_phase0[12] <= 0;
        input_pipeline_phase0[13] <= 0;
        input_pipeline_phase0[14] <= 0;
        input_pipeline_phase0[15] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          input_pipeline_phase0[0] <= input_typeconvert;
          input_pipeline_phase0[1] <= input_pipeline_phase0[0];
          input_pipeline_phase0[2] <= input_pipeline_phase0[1];
          input_pipeline_phase0[3] <= input_pipeline_phase0[2];
          input_pipeline_phase0[4] <= input_pipeline_phase0[3];
          input_pipeline_phase0[5] <= input_pipeline_phase0[4];
          input_pipeline_phase0[6] <= input_pipeline_phase0[5];
          input_pipeline_phase0[7] <= input_pipeline_phase0[6];
          input_pipeline_phase0[8] <= input_pipeline_phase0[7];
          input_pipeline_phase0[9] <= input_pipeline_phase0[8];
          input_pipeline_phase0[10] <= input_pipeline_phase0[9];
          input_pipeline_phase0[11] <= input_pipeline_phase0[10];
          input_pipeline_phase0[12] <= input_pipeline_phase0[11];
          input_pipeline_phase0[13] <= input_pipeline_phase0[12];
          input_pipeline_phase0[14] <= input_pipeline_phase0[13];
          input_pipeline_phase0[15] <= input_pipeline_phase0[14];
        end
      end
    end // Delay_Pipeline_Phase0_process


  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase1_process
      if (reset == 1'b1) begin
        input_pipeline_phase1[0] <= 0;
        input_pipeline_phase1[1] <= 0;
        input_pipeline_phase1[2] <= 0;
        input_pipeline_phase1[3] <= 0;
        input_pipeline_phase1[4] <= 0;
        input_pipeline_phase1[5] <= 0;
        input_pipeline_phase1[6] <= 0;
        input_pipeline_phase1[7] <= 0;
        input_pipeline_phase1[8] <= 0;
        input_pipeline_phase1[9] <= 0;
        input_pipeline_phase1[10] <= 0;
        input_pipeline_phase1[11] <= 0;
        input_pipeline_phase1[12] <= 0;
        input_pipeline_phase1[13] <= 0;
        input_pipeline_phase1[14] <= 0;
        input_pipeline_phase1[15] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          input_pipeline_phase1[0] <= input_typeconvert;
          input_pipeline_phase1[1] <= input_pipeline_phase1[0];
          input_pipeline_phase1[2] <= input_pipeline_phase1[1];
          input_pipeline_phase1[3] <= input_pipeline_phase1[2];
          input_pipeline_phase1[4] <= input_pipeline_phase1[3];
          input_pipeline_phase1[5] <= input_pipeline_phase1[4];
          input_pipeline_phase1[6] <= input_pipeline_phase1[5];
          input_pipeline_phase1[7] <= input_pipeline_phase1[6];
          input_pipeline_phase1[8] <= input_pipeline_phase1[7];
          input_pipeline_phase1[9] <= input_pipeline_phase1[8];
          input_pipeline_phase1[10] <= input_pipeline_phase1[9];
          input_pipeline_phase1[11] <= input_pipeline_phase1[10];
          input_pipeline_phase1[12] <= input_pipeline_phase1[11];
          input_pipeline_phase1[13] <= input_pipeline_phase1[12];
          input_pipeline_phase1[14] <= input_pipeline_phase1[13];
          input_pipeline_phase1[15] <= input_pipeline_phase1[14];
        end
      end
    end // Delay_Pipeline_Phase1_process


  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase2_process
      if (reset == 1'b1) begin
        input_pipeline_phase2[0] <= 0;
        input_pipeline_phase2[1] <= 0;
        input_pipeline_phase2[2] <= 0;
        input_pipeline_phase2[3] <= 0;
        input_pipeline_phase2[4] <= 0;
        input_pipeline_phase2[5] <= 0;
        input_pipeline_phase2[6] <= 0;
        input_pipeline_phase2[7] <= 0;
        input_pipeline_phase2[8] <= 0;
        input_pipeline_phase2[9] <= 0;
        input_pipeline_phase2[10] <= 0;
        input_pipeline_phase2[11] <= 0;
        input_pipeline_phase2[12] <= 0;
        input_pipeline_phase2[13] <= 0;
        input_pipeline_phase2[14] <= 0;
        input_pipeline_phase2[15] <= 0;
      end
      else begin
        if (phase_2 == 1'b1) begin
          input_pipeline_phase2[0] <= input_typeconvert;
          input_pipeline_phase2[1] <= input_pipeline_phase2[0];
          input_pipeline_phase2[2] <= input_pipeline_phase2[1];
          input_pipeline_phase2[3] <= input_pipeline_phase2[2];
          input_pipeline_phase2[4] <= input_pipeline_phase2[3];
          input_pipeline_phase2[5] <= input_pipeline_phase2[4];
          input_pipeline_phase2[6] <= input_pipeline_phase2[5];
          input_pipeline_phase2[7] <= input_pipeline_phase2[6];
          input_pipeline_phase2[8] <= input_pipeline_phase2[7];
          input_pipeline_phase2[9] <= input_pipeline_phase2[8];
          input_pipeline_phase2[10] <= input_pipeline_phase2[9];
          input_pipeline_phase2[11] <= input_pipeline_phase2[10];
          input_pipeline_phase2[12] <= input_pipeline_phase2[11];
          input_pipeline_phase2[13] <= input_pipeline_phase2[12];
          input_pipeline_phase2[14] <= input_pipeline_phase2[13];
          input_pipeline_phase2[15] <= input_pipeline_phase2[14];
        end
      end
    end // Delay_Pipeline_Phase2_process


  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase3_process
      if (reset == 1'b1) begin
        input_pipeline_phase3[0] <= 0;
        input_pipeline_phase3[1] <= 0;
        input_pipeline_phase3[2] <= 0;
        input_pipeline_phase3[3] <= 0;
        input_pipeline_phase3[4] <= 0;
        input_pipeline_phase3[5] <= 0;
        input_pipeline_phase3[6] <= 0;
        input_pipeline_phase3[7] <= 0;
        input_pipeline_phase3[8] <= 0;
        input_pipeline_phase3[9] <= 0;
        input_pipeline_phase3[10] <= 0;
        input_pipeline_phase3[11] <= 0;
        input_pipeline_phase3[12] <= 0;
        input_pipeline_phase3[13] <= 0;
        input_pipeline_phase3[14] <= 0;
        input_pipeline_phase3[15] <= 0;
      end
      else begin
        if (phase_3 == 1'b1) begin
          input_pipeline_phase3[0] <= input_typeconvert;
          input_pipeline_phase3[1] <= input_pipeline_phase3[0];
          input_pipeline_phase3[2] <= input_pipeline_phase3[1];
          input_pipeline_phase3[3] <= input_pipeline_phase3[2];
          input_pipeline_phase3[4] <= input_pipeline_phase3[3];
          input_pipeline_phase3[5] <= input_pipeline_phase3[4];
          input_pipeline_phase3[6] <= input_pipeline_phase3[5];
          input_pipeline_phase3[7] <= input_pipeline_phase3[6];
          input_pipeline_phase3[8] <= input_pipeline_phase3[7];
          input_pipeline_phase3[9] <= input_pipeline_phase3[8];
          input_pipeline_phase3[10] <= input_pipeline_phase3[9];
          input_pipeline_phase3[11] <= input_pipeline_phase3[10];
          input_pipeline_phase3[12] <= input_pipeline_phase3[11];
          input_pipeline_phase3[13] <= input_pipeline_phase3[12];
          input_pipeline_phase3[14] <= input_pipeline_phase3[13];
          input_pipeline_phase3[15] <= input_pipeline_phase3[14];
        end
      end
    end // Delay_Pipeline_Phase3_process


  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase4_process
      if (reset == 1'b1) begin
        input_pipeline_phase4[0] <= 0;
        input_pipeline_phase4[1] <= 0;
        input_pipeline_phase4[2] <= 0;
        input_pipeline_phase4[3] <= 0;
        input_pipeline_phase4[4] <= 0;
        input_pipeline_phase4[5] <= 0;
        input_pipeline_phase4[6] <= 0;
        input_pipeline_phase4[7] <= 0;
        input_pipeline_phase4[8] <= 0;
        input_pipeline_phase4[9] <= 0;
        input_pipeline_phase4[10] <= 0;
        input_pipeline_phase4[11] <= 0;
        input_pipeline_phase4[12] <= 0;
        input_pipeline_phase4[13] <= 0;
        input_pipeline_phase4[14] <= 0;
        input_pipeline_phase4[15] <= 0;
      end
      else begin
        if (phase_4 == 1'b1) begin
          input_pipeline_phase4[0] <= input_typeconvert;
          input_pipeline_phase4[1] <= input_pipeline_phase4[0];
          input_pipeline_phase4[2] <= input_pipeline_phase4[1];
          input_pipeline_phase4[3] <= input_pipeline_phase4[2];
          input_pipeline_phase4[4] <= input_pipeline_phase4[3];
          input_pipeline_phase4[5] <= input_pipeline_phase4[4];
          input_pipeline_phase4[6] <= input_pipeline_phase4[5];
          input_pipeline_phase4[7] <= input_pipeline_phase4[6];
          input_pipeline_phase4[8] <= input_pipeline_phase4[7];
          input_pipeline_phase4[9] <= input_pipeline_phase4[8];
          input_pipeline_phase4[10] <= input_pipeline_phase4[9];
          input_pipeline_phase4[11] <= input_pipeline_phase4[10];
          input_pipeline_phase4[12] <= input_pipeline_phase4[11];
          input_pipeline_phase4[13] <= input_pipeline_phase4[12];
          input_pipeline_phase4[14] <= input_pipeline_phase4[13];
          input_pipeline_phase4[15] <= input_pipeline_phase4[14];
        end
      end
    end // Delay_Pipeline_Phase4_process


  assign mul_temp = input_typeconvert * coeffphase1_1;
  assign product_phase0_1 = mul_temp[31:16];

  assign mul_temp_1 = input_pipeline_phase0[0] * coeffphase1_2;
  assign product_phase0_2 = mul_temp_1[31:16];

  assign mul_temp_2 = input_pipeline_phase0[1] * coeffphase1_3;
  assign product_phase0_3 = mul_temp_2[31:16];

  assign mul_temp_3 = input_pipeline_phase0[2] * coeffphase1_4;
  assign product_phase0_4 = mul_temp_3[31:16];

  assign mul_temp_4 = input_pipeline_phase0[3] * coeffphase1_5;
  assign product_phase0_5 = mul_temp_4[31:16];

  assign mul_temp_5 = input_pipeline_phase0[4] * coeffphase1_6;
  assign product_phase0_6 = mul_temp_5[31:16];

  assign mul_temp_6 = input_pipeline_phase0[5] * coeffphase1_7;
  assign product_phase0_7 = mul_temp_6[31:16];

  assign mul_temp_7 = input_pipeline_phase0[6] * coeffphase1_8;
  assign product_phase0_8 = mul_temp_7[31:16];

  assign mul_temp_8 = input_pipeline_phase0[7] * coeffphase1_9;
  assign product_phase0_9 = mul_temp_8[31:16];

  assign mul_temp_9 = input_pipeline_phase0[8] * coeffphase1_10;
  assign product_phase0_10 = mul_temp_9[31:16];

  assign mul_temp_10 = input_pipeline_phase0[9] * coeffphase1_11;
  assign product_phase0_11 = mul_temp_10[31:16];

  assign mul_temp_11 = input_pipeline_phase0[10] * coeffphase1_12;
  assign product_phase0_12 = mul_temp_11[31:16];

  assign mul_temp_12 = input_pipeline_phase0[11] * coeffphase1_13;
  assign product_phase0_13 = mul_temp_12[31:16];

  assign mul_temp_13 = input_pipeline_phase0[12] * coeffphase1_14;
  assign product_phase0_14 = mul_temp_13[31:16];

  assign mul_temp_14 = input_pipeline_phase0[13] * coeffphase1_15;
  assign product_phase0_15 = mul_temp_14[31:16];

  assign mul_temp_15 = input_pipeline_phase0[14] * coeffphase1_16;
  assign product_phase0_16 = mul_temp_15[31:16];

  assign mul_temp_16 = input_pipeline_phase0[15] * coeffphase1_17;
  assign product_phase0_17 = mul_temp_16[31:16];

  assign mul_temp_17 = input_pipeline_phase1[0] * coeffphase2_1;
  assign product_phase1_1 = mul_temp_17[31:16];

  assign mul_temp_18 = input_pipeline_phase1[1] * coeffphase2_2;
  assign product_phase1_2 = mul_temp_18[31:16];

  assign mul_temp_19 = input_pipeline_phase1[2] * coeffphase2_3;
  assign product_phase1_3 = mul_temp_19[31:16];

  assign mul_temp_20 = input_pipeline_phase1[3] * coeffphase2_4;
  assign product_phase1_4 = mul_temp_20[31:16];

  assign mul_temp_21 = input_pipeline_phase1[4] * coeffphase2_5;
  assign product_phase1_5 = mul_temp_21[31:16];

  assign mul_temp_22 = input_pipeline_phase1[5] * coeffphase2_6;
  assign product_phase1_6 = mul_temp_22[31:16];

  assign mul_temp_23 = input_pipeline_phase1[6] * coeffphase2_7;
  assign product_phase1_7 = mul_temp_23[31:16];

  assign mul_temp_24 = input_pipeline_phase1[7] * coeffphase2_8;
  assign product_phase1_8 = mul_temp_24[31:16];

  assign mul_temp_25 = input_pipeline_phase1[8] * coeffphase2_9;
  assign product_phase1_9 = mul_temp_25[31:16];

  assign mul_temp_26 = input_pipeline_phase1[9] * coeffphase2_10;
  assign product_phase1_10 = mul_temp_26[31:16];

  assign mul_temp_27 = input_pipeline_phase1[10] * coeffphase2_11;
  assign product_phase1_11 = mul_temp_27[31:16];

  assign mul_temp_28 = input_pipeline_phase1[11] * coeffphase2_12;
  assign product_phase1_12 = mul_temp_28[31:16];

  assign mul_temp_29 = input_pipeline_phase1[12] * coeffphase2_13;
  assign product_phase1_13 = mul_temp_29[31:16];

  assign mul_temp_30 = input_pipeline_phase1[13] * coeffphase2_14;
  assign product_phase1_14 = mul_temp_30[31:16];

  assign mul_temp_31 = input_pipeline_phase1[14] * coeffphase2_15;
  assign product_phase1_15 = mul_temp_31[31:16];

  assign mul_temp_32 = input_pipeline_phase1[15] * coeffphase2_16;
  assign product_phase1_16 = mul_temp_32[31:16];

  assign mul_temp_33 = input_pipeline_phase2[0] * coeffphase3_1;
  assign product_phase2_1 = mul_temp_33[31:16];

  assign mul_temp_34 = input_pipeline_phase2[1] * coeffphase3_2;
  assign product_phase2_2 = mul_temp_34[31:16];

  assign mul_temp_35 = input_pipeline_phase2[2] * coeffphase3_3;
  assign product_phase2_3 = mul_temp_35[31:16];

  assign mul_temp_36 = input_pipeline_phase2[3] * coeffphase3_4;
  assign product_phase2_4 = mul_temp_36[31:16];

  assign mul_temp_37 = input_pipeline_phase2[4] * coeffphase3_5;
  assign product_phase2_5 = mul_temp_37[31:16];

  assign mul_temp_38 = input_pipeline_phase2[5] * coeffphase3_6;
  assign product_phase2_6 = mul_temp_38[31:16];

  assign mul_temp_39 = input_pipeline_phase2[6] * coeffphase3_7;
  assign product_phase2_7 = mul_temp_39[31:16];

  assign mul_temp_40 = input_pipeline_phase2[7] * coeffphase3_8;
  assign product_phase2_8 = mul_temp_40[31:16];

  assign mul_temp_41 = input_pipeline_phase2[8] * coeffphase3_9;
  assign product_phase2_9 = mul_temp_41[31:16];

  assign mul_temp_42 = input_pipeline_phase2[9] * coeffphase3_10;
  assign product_phase2_10 = mul_temp_42[31:16];

  assign mul_temp_43 = input_pipeline_phase2[10] * coeffphase3_11;
  assign product_phase2_11 = mul_temp_43[31:16];

  assign mul_temp_44 = input_pipeline_phase2[11] * coeffphase3_12;
  assign product_phase2_12 = mul_temp_44[31:16];

  assign mul_temp_45 = input_pipeline_phase2[12] * coeffphase3_13;
  assign product_phase2_13 = mul_temp_45[31:16];

  assign mul_temp_46 = input_pipeline_phase2[13] * coeffphase3_14;
  assign product_phase2_14 = mul_temp_46[31:16];

  assign mul_temp_47 = input_pipeline_phase2[14] * coeffphase3_15;
  assign product_phase2_15 = mul_temp_47[31:16];

  assign mul_temp_48 = input_pipeline_phase2[15] * coeffphase3_16;
  assign product_phase2_16 = mul_temp_48[31:16];

  assign mul_temp_49 = input_pipeline_phase3[0] * coeffphase4_1;
  assign product_phase3_1 = mul_temp_49[31:16];

  assign mul_temp_50 = input_pipeline_phase3[1] * coeffphase4_2;
  assign product_phase3_2 = mul_temp_50[31:16];

  assign mul_temp_51 = input_pipeline_phase3[2] * coeffphase4_3;
  assign product_phase3_3 = mul_temp_51[31:16];

  assign mul_temp_52 = input_pipeline_phase3[3] * coeffphase4_4;
  assign product_phase3_4 = mul_temp_52[31:16];

  assign mul_temp_53 = input_pipeline_phase3[4] * coeffphase4_5;
  assign product_phase3_5 = mul_temp_53[31:16];

  assign mul_temp_54 = input_pipeline_phase3[5] * coeffphase4_6;
  assign product_phase3_6 = mul_temp_54[31:16];

  assign mul_temp_55 = input_pipeline_phase3[6] * coeffphase4_7;
  assign product_phase3_7 = mul_temp_55[31:16];

  assign mul_temp_56 = input_pipeline_phase3[7] * coeffphase4_8;
  assign product_phase3_8 = mul_temp_56[31:16];

  assign mul_temp_57 = input_pipeline_phase3[8] * coeffphase4_9;
  assign product_phase3_9 = mul_temp_57[31:16];

  assign mul_temp_58 = input_pipeline_phase3[9] * coeffphase4_10;
  assign product_phase3_10 = mul_temp_58[31:16];

  assign mul_temp_59 = input_pipeline_phase3[10] * coeffphase4_11;
  assign product_phase3_11 = mul_temp_59[31:16];

  assign mul_temp_60 = input_pipeline_phase3[11] * coeffphase4_12;
  assign product_phase3_12 = mul_temp_60[31:16];

  assign mul_temp_61 = input_pipeline_phase3[12] * coeffphase4_13;
  assign product_phase3_13 = mul_temp_61[31:16];

  assign mul_temp_62 = input_pipeline_phase3[13] * coeffphase4_14;
  assign product_phase3_14 = mul_temp_62[31:16];

  assign mul_temp_63 = input_pipeline_phase3[14] * coeffphase4_15;
  assign product_phase3_15 = mul_temp_63[31:16];

  assign mul_temp_64 = input_pipeline_phase3[15] * coeffphase4_16;
  assign product_phase3_16 = mul_temp_64[31:16];

  assign mul_temp_65 = input_pipeline_phase4[0] * coeffphase5_1;
  assign product_phase4_1 = mul_temp_65[31:16];

  assign mul_temp_66 = input_pipeline_phase4[1] * coeffphase5_2;
  assign product_phase4_2 = mul_temp_66[31:16];

  assign mul_temp_67 = input_pipeline_phase4[2] * coeffphase5_3;
  assign product_phase4_3 = mul_temp_67[31:16];

  assign mul_temp_68 = input_pipeline_phase4[3] * coeffphase5_4;
  assign product_phase4_4 = mul_temp_68[31:16];

  assign mul_temp_69 = input_pipeline_phase4[4] * coeffphase5_5;
  assign product_phase4_5 = mul_temp_69[31:16];

  assign mul_temp_70 = input_pipeline_phase4[5] * coeffphase5_6;
  assign product_phase4_6 = mul_temp_70[31:16];

  assign mul_temp_71 = input_pipeline_phase4[6] * coeffphase5_7;
  assign product_phase4_7 = mul_temp_71[31:16];

  assign mul_temp_72 = input_pipeline_phase4[7] * coeffphase5_8;
  assign product_phase4_8 = mul_temp_72[31:16];

  assign mul_temp_73 = input_pipeline_phase4[8] * coeffphase5_9;
  assign product_phase4_9 = mul_temp_73[31:16];

  assign mul_temp_74 = input_pipeline_phase4[9] * coeffphase5_10;
  assign product_phase4_10 = mul_temp_74[31:16];

  assign mul_temp_75 = input_pipeline_phase4[10] * coeffphase5_11;
  assign product_phase4_11 = mul_temp_75[31:16];

  assign mul_temp_76 = input_pipeline_phase4[11] * coeffphase5_12;
  assign product_phase4_12 = mul_temp_76[31:16];

  assign mul_temp_77 = input_pipeline_phase4[12] * coeffphase5_13;
  assign product_phase4_13 = mul_temp_77[31:16];

  assign mul_temp_78 = input_pipeline_phase4[13] * coeffphase5_14;
  assign product_phase4_14 = mul_temp_78[31:16];

  assign mul_temp_79 = input_pipeline_phase4[14] * coeffphase5_15;
  assign product_phase4_15 = mul_temp_79[31:16];

  assign mul_temp_80 = input_pipeline_phase4[15] * coeffphase5_16;
  assign product_phase4_16 = mul_temp_80[31:16];

  assign quantized_sum = product_phase4_1;

  assign add_cast = quantized_sum;
  assign add_cast_1 = product_phase4_2;
  assign add_temp = add_cast + add_cast_1;
  assign sum1 = add_temp[15:0];

  assign add_cast_2 = sum1;
  assign add_cast_3 = product_phase4_3;
  assign add_temp_1 = add_cast_2 + add_cast_3;
  assign sum2 = add_temp_1[15:0];

  assign add_cast_4 = sum2;
  assign add_cast_5 = product_phase4_4;
  assign add_temp_2 = add_cast_4 + add_cast_5;
  assign sum3 = add_temp_2[15:0];

  assign add_cast_6 = sum3;
  assign add_cast_7 = product_phase4_5;
  assign add_temp_3 = add_cast_6 + add_cast_7;
  assign sum4 = add_temp_3[15:0];

  assign add_cast_8 = sum4;
  assign add_cast_9 = product_phase4_6;
  assign add_temp_4 = add_cast_8 + add_cast_9;
  assign sum5 = add_temp_4[15:0];

  assign add_cast_10 = sum5;
  assign add_cast_11 = product_phase4_7;
  assign add_temp_5 = add_cast_10 + add_cast_11;
  assign sum6 = add_temp_5[15:0];

  assign add_cast_12 = sum6;
  assign add_cast_13 = product_phase4_8;
  assign add_temp_6 = add_cast_12 + add_cast_13;
  assign sum7 = add_temp_6[15:0];

  assign add_cast_14 = sum7;
  assign add_cast_15 = product_phase4_9;
  assign add_temp_7 = add_cast_14 + add_cast_15;
  assign sum8 = add_temp_7[15:0];

  assign add_cast_16 = sum8;
  assign add_cast_17 = product_phase4_10;
  assign add_temp_8 = add_cast_16 + add_cast_17;
  assign sum9 = add_temp_8[15:0];

  assign add_cast_18 = sum9;
  assign add_cast_19 = product_phase4_11;
  assign add_temp_9 = add_cast_18 + add_cast_19;
  assign sum10 = add_temp_9[15:0];

  assign add_cast_20 = sum10;
  assign add_cast_21 = product_phase4_12;
  assign add_temp_10 = add_cast_20 + add_cast_21;
  assign sum11 = add_temp_10[15:0];

  assign add_cast_22 = sum11;
  assign add_cast_23 = product_phase4_13;
  assign add_temp_11 = add_cast_22 + add_cast_23;
  assign sum12 = add_temp_11[15:0];

  assign add_cast_24 = sum12;
  assign add_cast_25 = product_phase4_14;
  assign add_temp_12 = add_cast_24 + add_cast_25;
  assign sum13 = add_temp_12[15:0];

  assign add_cast_26 = sum13;
  assign add_cast_27 = product_phase4_15;
  assign add_temp_13 = add_cast_26 + add_cast_27;
  assign sum14 = add_temp_13[15:0];

  assign add_cast_28 = sum14;
  assign add_cast_29 = product_phase4_16;
  assign add_temp_14 = add_cast_28 + add_cast_29;
  assign sum15 = add_temp_14[15:0];

  assign add_cast_30 = sum15;
  assign add_cast_31 = product_phase3_1;
  assign add_temp_15 = add_cast_30 + add_cast_31;
  assign sum16 = add_temp_15[15:0];

  assign add_cast_32 = sum16;
  assign add_cast_33 = product_phase3_2;
  assign add_temp_16 = add_cast_32 + add_cast_33;
  assign sum17 = add_temp_16[15:0];

  assign add_cast_34 = sum17;
  assign add_cast_35 = product_phase3_3;
  assign add_temp_17 = add_cast_34 + add_cast_35;
  assign sum18 = add_temp_17[15:0];

  assign add_cast_36 = sum18;
  assign add_cast_37 = product_phase3_4;
  assign add_temp_18 = add_cast_36 + add_cast_37;
  assign sum19 = add_temp_18[15:0];

  assign add_cast_38 = sum19;
  assign add_cast_39 = product_phase3_5;
  assign add_temp_19 = add_cast_38 + add_cast_39;
  assign sum20 = add_temp_19[15:0];

  assign add_cast_40 = sum20;
  assign add_cast_41 = product_phase3_6;
  assign add_temp_20 = add_cast_40 + add_cast_41;
  assign sum21 = add_temp_20[15:0];

  assign add_cast_42 = sum21;
  assign add_cast_43 = product_phase3_7;
  assign add_temp_21 = add_cast_42 + add_cast_43;
  assign sum22 = add_temp_21[15:0];

  assign add_cast_44 = sum22;
  assign add_cast_45 = product_phase3_8;
  assign add_temp_22 = add_cast_44 + add_cast_45;
  assign sum23 = add_temp_22[15:0];

  assign add_cast_46 = sum23;
  assign add_cast_47 = product_phase3_9;
  assign add_temp_23 = add_cast_46 + add_cast_47;
  assign sum24 = add_temp_23[15:0];

  assign add_cast_48 = sum24;
  assign add_cast_49 = product_phase3_10;
  assign add_temp_24 = add_cast_48 + add_cast_49;
  assign sum25 = add_temp_24[15:0];

  assign add_cast_50 = sum25;
  assign add_cast_51 = product_phase3_11;
  assign add_temp_25 = add_cast_50 + add_cast_51;
  assign sum26 = add_temp_25[15:0];

  assign add_cast_52 = sum26;
  assign add_cast_53 = product_phase3_12;
  assign add_temp_26 = add_cast_52 + add_cast_53;
  assign sum27 = add_temp_26[15:0];

  assign add_cast_54 = sum27;
  assign add_cast_55 = product_phase3_13;
  assign add_temp_27 = add_cast_54 + add_cast_55;
  assign sum28 = add_temp_27[15:0];

  assign add_cast_56 = sum28;
  assign add_cast_57 = product_phase3_14;
  assign add_temp_28 = add_cast_56 + add_cast_57;
  assign sum29 = add_temp_28[15:0];

  assign add_cast_58 = sum29;
  assign add_cast_59 = product_phase3_15;
  assign add_temp_29 = add_cast_58 + add_cast_59;
  assign sum30 = add_temp_29[15:0];

  assign add_cast_60 = sum30;
  assign add_cast_61 = product_phase3_16;
  assign add_temp_30 = add_cast_60 + add_cast_61;
  assign sum31 = add_temp_30[15:0];

  assign add_cast_62 = sum31;
  assign add_cast_63 = product_phase2_1;
  assign add_temp_31 = add_cast_62 + add_cast_63;
  assign sum32 = add_temp_31[15:0];

  assign add_cast_64 = sum32;
  assign add_cast_65 = product_phase2_2;
  assign add_temp_32 = add_cast_64 + add_cast_65;
  assign sum33 = add_temp_32[15:0];

  assign add_cast_66 = sum33;
  assign add_cast_67 = product_phase2_3;
  assign add_temp_33 = add_cast_66 + add_cast_67;
  assign sum34 = add_temp_33[15:0];

  assign add_cast_68 = sum34;
  assign add_cast_69 = product_phase2_4;
  assign add_temp_34 = add_cast_68 + add_cast_69;
  assign sum35 = add_temp_34[15:0];

  assign add_cast_70 = sum35;
  assign add_cast_71 = product_phase2_5;
  assign add_temp_35 = add_cast_70 + add_cast_71;
  assign sum36 = add_temp_35[15:0];

  assign add_cast_72 = sum36;
  assign add_cast_73 = product_phase2_6;
  assign add_temp_36 = add_cast_72 + add_cast_73;
  assign sum37 = add_temp_36[15:0];

  assign add_cast_74 = sum37;
  assign add_cast_75 = product_phase2_7;
  assign add_temp_37 = add_cast_74 + add_cast_75;
  assign sum38 = add_temp_37[15:0];

  assign add_cast_76 = sum38;
  assign add_cast_77 = product_phase2_8;
  assign add_temp_38 = add_cast_76 + add_cast_77;
  assign sum39 = add_temp_38[15:0];

  assign add_cast_78 = sum39;
  assign add_cast_79 = product_phase2_9;
  assign add_temp_39 = add_cast_78 + add_cast_79;
  assign sum40 = add_temp_39[15:0];

  assign add_cast_80 = sum40;
  assign add_cast_81 = product_phase2_10;
  assign add_temp_40 = add_cast_80 + add_cast_81;
  assign sum41 = add_temp_40[15:0];

  assign add_cast_82 = sum41;
  assign add_cast_83 = product_phase2_11;
  assign add_temp_41 = add_cast_82 + add_cast_83;
  assign sum42 = add_temp_41[15:0];

  assign add_cast_84 = sum42;
  assign add_cast_85 = product_phase2_12;
  assign add_temp_42 = add_cast_84 + add_cast_85;
  assign sum43 = add_temp_42[15:0];

  assign add_cast_86 = sum43;
  assign add_cast_87 = product_phase2_13;
  assign add_temp_43 = add_cast_86 + add_cast_87;
  assign sum44 = add_temp_43[15:0];

  assign add_cast_88 = sum44;
  assign add_cast_89 = product_phase2_14;
  assign add_temp_44 = add_cast_88 + add_cast_89;
  assign sum45 = add_temp_44[15:0];

  assign add_cast_90 = sum45;
  assign add_cast_91 = product_phase2_15;
  assign add_temp_45 = add_cast_90 + add_cast_91;
  assign sum46 = add_temp_45[15:0];

  assign add_cast_92 = sum46;
  assign add_cast_93 = product_phase2_16;
  assign add_temp_46 = add_cast_92 + add_cast_93;
  assign sum47 = add_temp_46[15:0];

  assign add_cast_94 = sum47;
  assign add_cast_95 = product_phase1_1;
  assign add_temp_47 = add_cast_94 + add_cast_95;
  assign sum48 = add_temp_47[15:0];

  assign add_cast_96 = sum48;
  assign add_cast_97 = product_phase1_2;
  assign add_temp_48 = add_cast_96 + add_cast_97;
  assign sum49 = add_temp_48[15:0];

  assign add_cast_98 = sum49;
  assign add_cast_99 = product_phase1_3;
  assign add_temp_49 = add_cast_98 + add_cast_99;
  assign sum50 = add_temp_49[15:0];

  assign add_cast_100 = sum50;
  assign add_cast_101 = product_phase1_4;
  assign add_temp_50 = add_cast_100 + add_cast_101;
  assign sum51 = add_temp_50[15:0];

  assign add_cast_102 = sum51;
  assign add_cast_103 = product_phase1_5;
  assign add_temp_51 = add_cast_102 + add_cast_103;
  assign sum52 = add_temp_51[15:0];

  assign add_cast_104 = sum52;
  assign add_cast_105 = product_phase1_6;
  assign add_temp_52 = add_cast_104 + add_cast_105;
  assign sum53 = add_temp_52[15:0];

  assign add_cast_106 = sum53;
  assign add_cast_107 = product_phase1_7;
  assign add_temp_53 = add_cast_106 + add_cast_107;
  assign sum54 = add_temp_53[15:0];

  assign add_cast_108 = sum54;
  assign add_cast_109 = product_phase1_8;
  assign add_temp_54 = add_cast_108 + add_cast_109;
  assign sum55 = add_temp_54[15:0];

  assign add_cast_110 = sum55;
  assign add_cast_111 = product_phase1_9;
  assign add_temp_55 = add_cast_110 + add_cast_111;
  assign sum56 = add_temp_55[15:0];

  assign add_cast_112 = sum56;
  assign add_cast_113 = product_phase1_10;
  assign add_temp_56 = add_cast_112 + add_cast_113;
  assign sum57 = add_temp_56[15:0];

  assign add_cast_114 = sum57;
  assign add_cast_115 = product_phase1_11;
  assign add_temp_57 = add_cast_114 + add_cast_115;
  assign sum58 = add_temp_57[15:0];

  assign add_cast_116 = sum58;
  assign add_cast_117 = product_phase1_12;
  assign add_temp_58 = add_cast_116 + add_cast_117;
  assign sum59 = add_temp_58[15:0];

  assign add_cast_118 = sum59;
  assign add_cast_119 = product_phase1_13;
  assign add_temp_59 = add_cast_118 + add_cast_119;
  assign sum60 = add_temp_59[15:0];

  assign add_cast_120 = sum60;
  assign add_cast_121 = product_phase1_14;
  assign add_temp_60 = add_cast_120 + add_cast_121;
  assign sum61 = add_temp_60[15:0];

  assign add_cast_122 = sum61;
  assign add_cast_123 = product_phase1_15;
  assign add_temp_61 = add_cast_122 + add_cast_123;
  assign sum62 = add_temp_61[15:0];

  assign add_cast_124 = sum62;
  assign add_cast_125 = product_phase1_16;
  assign add_temp_62 = add_cast_124 + add_cast_125;
  assign sum63 = add_temp_62[15:0];

  assign add_cast_126 = sum63;
  assign add_cast_127 = product_phase0_1;
  assign add_temp_63 = add_cast_126 + add_cast_127;
  assign sum64 = add_temp_63[15:0];

  assign add_cast_128 = sum64;
  assign add_cast_129 = product_phase0_2;
  assign add_temp_64 = add_cast_128 + add_cast_129;
  assign sum65 = add_temp_64[15:0];

  assign add_cast_130 = sum65;
  assign add_cast_131 = product_phase0_3;
  assign add_temp_65 = add_cast_130 + add_cast_131;
  assign sum66 = add_temp_65[15:0];

  assign add_cast_132 = sum66;
  assign add_cast_133 = product_phase0_4;
  assign add_temp_66 = add_cast_132 + add_cast_133;
  assign sum67 = add_temp_66[15:0];

  assign add_cast_134 = sum67;
  assign add_cast_135 = product_phase0_5;
  assign add_temp_67 = add_cast_134 + add_cast_135;
  assign sum68 = add_temp_67[15:0];

  assign add_cast_136 = sum68;
  assign add_cast_137 = product_phase0_6;
  assign add_temp_68 = add_cast_136 + add_cast_137;
  assign sum69 = add_temp_68[15:0];

  assign add_cast_138 = sum69;
  assign add_cast_139 = product_phase0_7;
  assign add_temp_69 = add_cast_138 + add_cast_139;
  assign sum70 = add_temp_69[15:0];

  assign add_cast_140 = sum70;
  assign add_cast_141 = product_phase0_8;
  assign add_temp_70 = add_cast_140 + add_cast_141;
  assign sum71 = add_temp_70[15:0];

  assign add_cast_142 = sum71;
  assign add_cast_143 = product_phase0_9;
  assign add_temp_71 = add_cast_142 + add_cast_143;
  assign sum72 = add_temp_71[15:0];

  assign add_cast_144 = sum72;
  assign add_cast_145 = product_phase0_10;
  assign add_temp_72 = add_cast_144 + add_cast_145;
  assign sum73 = add_temp_72[15:0];

  assign add_cast_146 = sum73;
  assign add_cast_147 = product_phase0_11;
  assign add_temp_73 = add_cast_146 + add_cast_147;
  assign sum74 = add_temp_73[15:0];

  assign add_cast_148 = sum74;
  assign add_cast_149 = product_phase0_12;
  assign add_temp_74 = add_cast_148 + add_cast_149;
  assign sum75 = add_temp_74[15:0];

  assign add_cast_150 = sum75;
  assign add_cast_151 = product_phase0_13;
  assign add_temp_75 = add_cast_150 + add_cast_151;
  assign sum76 = add_temp_75[15:0];

  assign add_cast_152 = sum76;
  assign add_cast_153 = product_phase0_14;
  assign add_temp_76 = add_cast_152 + add_cast_153;
  assign sum77 = add_temp_76[15:0];

  assign add_cast_154 = sum77;
  assign add_cast_155 = product_phase0_15;
  assign add_temp_77 = add_cast_154 + add_cast_155;
  assign sum78 = add_temp_77[15:0];

  assign add_cast_156 = sum78;
  assign add_cast_157 = product_phase0_16;
  assign add_temp_78 = add_cast_156 + add_cast_157;
  assign sum79 = add_temp_78[15:0];

  assign add_cast_158 = sum79;
  assign add_cast_159 = product_phase0_17;
  assign add_temp_79 = add_cast_158 + add_cast_159;
  assign sum80 = add_temp_79[15:0];

  always @ (posedge clk or posedge reset)
    begin: DataHoldRegister_process
      if (reset == 1'b1) begin
        regout <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          regout <= sum80;
        end
      end
    end // DataHoldRegister_process

  assign muxout = (phase_0 == 1'b1) ? sum80 :
            regout;
  // Assignment Statements
  assign FIR_Decimation_out = muxout;
endmodule  // FIR_Decimation
